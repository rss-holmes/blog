{"componentChunkName":"component---src-templates-blog-post-js","path":"/dictionaries/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"8b7071e8-39a6-593a-8a3e-dd5ca6e02378","html":"<h3 id=\"keypoints\"><a href=\"#keypoints\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keypoints</h3>\n<ul>\n<li>dictionaries are indexed by keys that can be of <strong>any hashable type</strong></li>\n<li>thus <strong>strings</strong> or <strong>integers</strong> or <strong>tuples</strong> (which contain hashable types in themselves) can be used as the index</li>\n<li>class attributes and variables in a stack frame are both stored internally in dictionaries</li>\n<li>specialized 3rd party based dictionaries exist - <strong>skip lists</strong> or <strong>B-tree</strong> based dictionaries</li>\n</ul>\n<h3 id=\"types-of-dictionaries\"><a href=\"#types-of-dictionaries\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types of Dictionaries</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Types of Dictionaries</span>\n<span class=\"token keyword\">import</span> collections\n<span class=\"token keyword\">from</span> types <span class=\"token keyword\">import</span> MappingProxyType\n\n<span class=\"token comment\"># in case the order of items in a dictionary is to be preserved use an ordered dict</span>\nd1 <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>OrderedDict<span class=\"token punctuation\">(</span>one<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> two<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> three<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># in case a default value has to be set when accessing a key which is not present</span>\n<span class=\"token comment\"># use a default dict.In this case if a key is not present and is trying to be accessed</span>\n<span class=\"token comment\"># it will set the value to an empty list</span>\nd2 <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># in case multiple dictionaries are present through which a particular key is to be searched</span>\n<span class=\"token comment\"># use a chainmap to chain the existing dictionaries instead of creating a new dictionary</span>\nchain <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>ChainMap<span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># in case a readonly dictionary is required which cannot be manipulated by the end user</span>\n<span class=\"token comment\"># but can be read by him we can use a mappingproxytype</span>\nwritable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nread_only <span class=\"token operator\">=</span> MappingProxyType<span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Unique Elements in a dictionary</span>\n<span class=\"token comment\"># when adding entries to a dictionary the keys are checked for equality and hashing equality</span>\n<span class=\"token comment\"># if the value is unique or the hash is unique or both are unique then a new key is created</span>\n<span class=\"token comment\"># and the value is mapped to that key.However in case there is equality and the hash is also</span>\n<span class=\"token comment\"># the same then the key is considered to be duplicate and the value is mapped to the original</span>\n<span class=\"token comment\"># key.</span>\n<span class=\"token comment\"># Also when adding or updating a dictionary in case the value of an old key is being updated</span>\n<span class=\"token comment\"># then only the value against the key is rewritten and not the key itself.This is done to</span>\n<span class=\"token comment\"># conserve computation cost</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'maybe'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># => {True: 'maybe'}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AlwaysEquals</span><span class=\"token punctuation\">:</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__hash__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\t\n<span class=\"token comment\"># since hash(object) calles the __hash__ dunder method and object1 == object2 calls the</span>\n<span class=\"token comment\"># __eq__ method , all the objects created from the above function will be equal and also</span>\n<span class=\"token comment\"># have the same hash.Thus all the objects from this class if used as keys in a dictionary</span>\n<span class=\"token comment\"># will start overriding each other</span>\n\n<span class=\"token punctuation\">{</span>AlwaysEquals<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> AlwaysEquals<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> AlwaysEquals<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># => {&lt;__main__.AlwaysEquals at 0x7fbae2eb2668>: 3}</span></code></pre></div>\n<h3 id=\"sorting-dictionaries\"><a href=\"#sorting-dictionaries\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sorting Dictionaries</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Sorting Dictionaries</span>\n\nxs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => [('a', 4), ('b', 2), ('c', 3), ('d', 1)] # This will sort by the key</span>\n<span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => [('d', 1), ('b', 2), ('c', 3), ('a', 4)] This will sort by the value rather than the key</span></code></pre></div>\n<h3 id=\"merging-2-dictionaries\"><a href=\"#merging-2-dictionaries\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Merging 2 dictionaries</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Merging 2 dictionaries into a 3rd dictionary</span>\n\n<span class=\"token comment\"># dataset to work on</span>\nxs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nys <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nzs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># merge 1</span>\nzs<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span>\nzs<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ys<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># merge 2</span>\nzs <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>ys<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># merge 3 for python 3.5+</span>\nzs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">**</span>xs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>ys<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># merge 4 for python 3.9+</span>\nzs <span class=\"token operator\">=</span> xs<span class=\"token operator\">|</span>ys</code></pre></div>","timeToRead":2,"frontmatter":{"title":"Dictionaries in Python","date":"November 21, 2020","spoiler":"The complete guide to dictionaries.","cta":null},"fields":{"slug":"/dictionaries/","langKey":"en"}}},"pageContext":{"slug":"/dictionaries/","previous":{"fields":{"slug":"/closures/","langKey":"en","directoryName":"closures","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Closures in python"}},"next":null,"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}