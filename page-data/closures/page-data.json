{"componentChunkName":"component---src-templates-blog-post-js","path":"/closures/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"3fa2cea6-ca4f-533c-8696-3ad63a142a8b","html":"<h1 id=\"closures\"><a href=\"#closures\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closures</h1>\n<p>A Closure is a function object that remembers values in enclosing scopes even if they are not present in memory.</p>\n<p>It is a record that stores a function together with an environment: a mapping associating each free variable of the function</p>\n<p>(variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound</p>\n<p>when the closure was created.A closure—unlike a plain function—allows the function to access those captured variables through</p>\n<p>the closure’s copies of their values or references, even when the function is invoked outside their scope.</p>\n<p>[<strong>python</strong>]</p>\n<p>def outerFunction(<em>text</em>):</p>\n<p>text = text</p>\n<p>def innerFunction():</p>\n<p>print(text)</p>\n<p><em># now we need to return a closure object instead of calling the innerfunction directly</em></p>\n<p><em>return</em> innerFunction</p>\n<p><em>if</em> <strong>name</strong> == ’<strong>main</strong>‘:</p>\n<p>myFunction = outerFunction(‘Hey!‘) <em># since the outerfunction returns a closure object which is kinda like a function we need to call the closure</em></p>\n<p>myFunction() <em># thus we separated the creation and calling of the closure object</em></p>\n<p>[<strong>end</strong>]</p>\n<ul>\n<li>closures are generally used as callback functions and provide some level of data hiding(encapsulation)</li>\n<li>it helps prevent the declaration of a lot of global variables</li>\n<li>in case of fewer number of functions closures can be used to achieve encapsulation but in case of a larger</li>\n</ul>\n<p>number of functions classed should be used to achieve the same result</p>\n<ul>\n<li>classes and closures both help in encapsulation and reducing global variables</li>\n<li>closures is just a simple extension of the inner/nested function concept wherein we</li>\n</ul>","timeToRead":1,"frontmatter":{"title":"Closures in python","date":"November 19, 2020","spoiler":"Do functions have a memory ?","cta":null},"fields":{"slug":"/closures/","langKey":"en"}}},"pageContext":{"slug":"/closures/","previous":{"fields":{"slug":"/comprehensions/","langKey":"en","directoryName":"comprehensions","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Comprehensions in python"}},"next":{"fields":{"slug":"/dictionaries/","langKey":"en","directoryName":"dictionaries","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Dictionaries in Python"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}