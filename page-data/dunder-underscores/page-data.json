{"componentChunkName":"component---src-templates-blog-post-js","path":"/dunder-underscores/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"c6a2886a-080c-59a3-90cb-670ce9c356ff","html":"<h3 id=\"single-underscores-before-variables-or-function-names-pseudo-private-variables\"><a href=\"#single-underscores-before-variables-or-function-names-pseudo-private-variables\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Underscores before variables or function names (Pseudo private variables)</h3>\n<p>A common convention is to put <strong>a single</strong> <strong>underscore before functions</strong> <strong>or variables</strong> which are  <strong>considered to be private</strong> inside a class.However this has <strong>no pythonic significance</strong> and the variables can still be directly accessed and mutated outside the class scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n        self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">_some_private_function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token comment\"># do something</span>\n\n<span class=\"token comment\"># The underscore in _bar variable and the  _some_private_function method has no particular pythonic significance.</span>\n<span class=\"token comment\"># It is just used to signify that it is a private variable or function</span></code></pre></div>\n<h3 id=\"single-underscores-after-variables-reusing-reserved-keywords\"><a href=\"#single-underscores-after-variables-reusing-reserved-keywords\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single underscores after variables (Reusing reserved keywords)</h3>\n<p>A common usecase for putting <strong>a single underscore after a variable name</strong> is for setting the name to a <strong>reserved keyword</strong> in python.This helps <strong>reuse reserved keywords (like class, object)</strong> to name our variables if it suits our scenario.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_object</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> class_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># here we use an underscore to create a class_ named variable which comes pretty close to the class keyword </span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># a trailing underscore is often attached to a variable to bypass the python reserved words namings</span>\n<span class=\"token comment\"># as class is a reserved word in python the nearest we can name a variable is class_</span></code></pre></div>\n<h3 id=\"double-underscores-before-variables-or-function-names-name-mangling\"><a href=\"#double-underscores-before-variables-or-function-names-name-mangling\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double underscores before variables or function names (Name Mangling)</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">:</span>\n    __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n        self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n        self<span class=\"token punctuation\">.</span>__baz <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n\n<span class=\"token comment\"># in this example if you print out all the variables of the class(using dir(Test()))</span>\n<span class=\"token comment\"># then foo and _bar will remain unchanged however the __baz variable will be renamed </span>\n<span class=\"token comment\"># to prevent name mangling for when the class is inherited mostly __baz becomes _Test__baz</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendedTest</span><span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n    self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n    self<span class=\"token punctuation\">.</span>__baz <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n\n<span class=\"token comment\"># in this example also if you try to access the __baz attribute in an instance of </span>\n<span class=\"token comment\"># ExtendedTest class it will give you an attribute error as it will be mangled as</span>\n<span class=\"token comment\"># _Extended_Test__baz</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ManglingTest</span><span class=\"token punctuation\">:</span>\n\n    __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__mangled <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_mangled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__mangled\n\nManglingTest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_mangled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 'hello'</span>\n<span class=\"token comment\"># using a private function mangled functions or attributes can be accessed</span></code></pre></div>\n<h3 id=\"double-underscores-before-and-after--function-names-magic-methods\"><a href=\"#double-underscores-before-and-after--function-names-magic-methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double underscores before and after  function names (Magic Methods)</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">################################################</span>\n\n<span class=\"token comment\"># my_module.py</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">external_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">23</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_internal_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">42</span>\n\n<span class=\"token comment\"># when a function inside a module is declared as starting with _ </span>\n<span class=\"token comment\"># it is not imported when importing from the module using *</span>\n<span class=\"token comment\"># ie from module import * wont pull in _internal_func</span>\n\n<span class=\"token comment\">################################################</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">:</span>\n    __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n        self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n        self<span class=\"token punctuation\">.</span>__baz <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n\n<span class=\"token comment\"># in this example if you print out all the variables of the class(using dir(Test()))</span>\n<span class=\"token comment\"># then foo and _bar will remain unchanged however the __baz variable will be renamed </span>\n<span class=\"token comment\"># to prevent name mangling for when the class is inherited mostly __baz becomes _Test__baz</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendedTest</span><span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n    self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n    self<span class=\"token punctuation\">.</span>__baz <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n\n<span class=\"token comment\"># in this example also if you try to access the __baz attribute in an instance of </span>\n<span class=\"token comment\"># ExtendedTest class it will give you an attribute error as it will be mangled as</span>\n<span class=\"token comment\"># _Extended_Test__baz</span>\n\n<span class=\"token comment\"># name mangling applies to any variable or function be it inside a class or</span>\n<span class=\"token comment\"># declared globally</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ManglingTest</span><span class=\"token punctuation\">:</span>\n\n    __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__mangled <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_mangled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__mangled\n\nManglingTest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_mangled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 'hello'</span>\n<span class=\"token comment\"># using a private function mangled functions or attributes can be accessed</span>\n\n<span class=\"token comment\"># *************Name mangling is not applied when the function or attribute </span>\n<span class=\"token comment\"># starts and ends with __ ie like __foo__ because they are reserved in python</span>\n<span class=\"token comment\"># for special cases</span></code></pre></div>","timeToRead":3,"frontmatter":{"title":"Dunder/Underscore Methods in Python","date":"November 22, 2020","spoiler":"Sprinkle some magic in your functions.","cta":null},"fields":{"slug":"/dunder-underscores/","langKey":"en"}}},"pageContext":{"slug":"/dunder-underscores/","previous":{"fields":{"slug":"/dictionaries/","langKey":"en","directoryName":"dictionaries","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Dictionaries in Python"}},"next":{"fields":{"slug":"/higher-functions/","langKey":"en","directoryName":"higher-functions","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Higher Functions in Python"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}