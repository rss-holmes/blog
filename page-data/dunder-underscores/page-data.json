{"componentChunkName":"component---src-templates-blog-post-js","path":"/dunder-underscores/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"c6a2886a-080c-59a3-90cb-670ce9c356ff","html":"<p>Underscores in python have a lot of significance when used in conjunction with variables or functions.</p>\n<p><strong>Single</strong> underscore <strong>before</strong> a <strong>variable name</strong> (Pseudo private variables)</p>\n<ul>\n<li>as a general convention variables with a leading underscore are <strong>considered to be private</strong>.</li>\n<li>an underscore before a variable has no pythonic significance.The python interpreter will treat it <strong>exactly similar</strong> to one without a leading underscore.</li>\n<li>variables with a leading underscore can still be directly accessed and mutated <strong>outside the class scope</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n        self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token number\">23</span></code></pre></div>\n<hr>\n<p><strong>Single</strong> underscore <strong>before</strong> a <strong>function name</strong> (Pseudo private function)</p>\n<ul>\n<li>as a general convention variables with a leading underscore are <strong>considered to be private.</strong></li>\n<li>an underscore before a variable has no pythonic significance.The python interpreter will treat it <strong>exactly similar</strong> to one without a leading underscore.</li>\n<li>functions with a leading underscore can still be directly accessed and mutated <strong>outside the class scope</strong>.</li>\n<li>another quirk of such functions are that these functions are not imported when importing from a module using *</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">:</span>\n\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">_some_private_function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token comment\"># do something</span></code></pre></div>\n<hr>\n<p><strong>Single</strong> underscore <strong>after</strong> a <strong>variable name</strong>(Reusing reserved keywords)</p>\n<ul>\n<li>an underscore after a variable is ofter used to reuse a reserved keyword(ex- class, object) which python doesnt allow to use normally.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_object</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> class_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># here we use an underscore to create a class_ named variable</span>\n\t\t<span class=\"token comment\"># which comes pretty close to the class keyword </span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<hr>\n<p><strong>Double</strong> underscore <strong>before</strong> a <strong>variable name</strong> (Name mangling)</p>\n<ul>\n<li><strong>Name Mangling</strong> is a feature provided by the python interpreter wherein the interpreter <strong>changes the name</strong> of the variable in a way that makes it <strong>harder to create collisions</strong> when the class is extended later.</li>\n<li>putting double underscore before a class variable directs the python interpreter to mangle the name of the variable to prevent name collisions in the future.</li>\n</ul>\n<p>Let us take an example to understand this -</p>\n<ol>\n<li>\n<p>Lets declare a class called <strong>Test</strong> with different kinds of variables</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">:</span>\n    __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n        self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n        self<span class=\"token punctuation\">.</span>__baz <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n\n<span class=\"token comment\"># in this example if you print out all the variables of the class(using dir(Test()))</span>\n<span class=\"token comment\"># then foo and _bar will remain unchanged however the __baz variable will be renamed </span>\n<span class=\"token comment\"># to prevent name mangling for when the class is inherited mostly __baz becomes _Test__baz</span></code></pre></div>\n<p>If you print out the variables of this class then foo and _bar would remain unchanged however <strong>baz would be mangled by the interpreter to something like _Test</strong>baz</p>\n</li>\n<li>\n<p>Lets extend this class to another class called <strong>ExtendedTest</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendedTest</span><span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n    self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n    self<span class=\"token punctuation\">.</span>__baz <span class=\"token operator\">=</span> <span class=\"token string\">'overridden'</span>\n\n<span class=\"token comment\"># in this example also if you try to access the __baz attribute in an instance of </span>\n<span class=\"token comment\"># ExtendedTest class it will give you an attribute error as it will be mangled as</span>\n<span class=\"token comment\"># _Extended_Test__baz</span></code></pre></div>\n<p>If you try to access the <strong>baz variable from an instance of the ExtendedTest class then you will get an error since it would be name mangled to <em>Extended</em>Test</strong>baz.</p>\n</li>\n<li>\n<p>To access mangled variables we need to use <strong>private functions</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ManglingTest</span><span class=\"token punctuation\">:</span>\n\n    __init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__mangled <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_mangled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__mangled\n\nManglingTest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_mangled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 'hello'</span>\n<span class=\"token comment\"># using a private function mangled functions or attributes can be accessed</span></code></pre></div>\n</li>\n</ol>\n<hr>\n<p><strong>Double</strong> underscore <strong>before and after</strong> a <strong>function name</strong> (Magic Methods)</p>\n<ul>\n<li>in python there are some very special functions wherein the name starts and ends with double underscore.These are calles dunder/magic/special methods</li>\n<li>\n<p>dunder methods allow us to emulate the behavior of built-in types.These help us extend the functionality of custom classes.Some common dunder methods are -</p>\n<ul>\n<li><code class=\"language-text\">__init__</code> is the most famous dunder method which is called when a class is instantiated.</li>\n<li><code class=\"language-text\">__add__</code> is called when we use the arithmetic operator + between 2 objects of a class.</li>\n<li><code class=\"language-text\">__repr__</code> is called when we try to get the string representation of an object of a class.</li>\n<li><code class=\"language-text\">__call__</code> is used to make an object of a class callable.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomClass</span> <span class=\"token punctuation\">:</span> \n      \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        self<span class=\"token punctuation\">.</span>string <span class=\"token operator\">=</span> string  \n           \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Object: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">)</span> \n          \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>string <span class=\"token operator\">+</span> other\n\n<span class=\"token comment\"># Driver Code </span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> \n      \n    <span class=\"token comment\"># object creation will use the __init__ magic method</span>\n    string1 <span class=\"token operator\">=</span> CustomClass<span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span> \n      \n    <span class=\"token comment\"># concatenate String object and a string, this will use __add__ magic method for concatenating the strings</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string1 <span class=\"token operator\">+</span> <span class=\"token string\">' Gods of Code'</span><span class=\"token punctuation\">)</span></code></pre></div>","timeToRead":3,"frontmatter":{"title":"Dunder/Underscore Methods in Python","date":"November 22, 2020","spoiler":"Sprinkle some magic in your functions.","cta":null},"fields":{"slug":"/dunder-underscores/","langKey":"en"}}},"pageContext":{"slug":"/dunder-underscores/","previous":{"fields":{"slug":"/dictionaries/","langKey":"en","directoryName":"dictionaries","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Dictionaries in Python"}},"next":{"fields":{"slug":"/higher-functions/","langKey":"en","directoryName":"higher-functions","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Higher Functions in Python"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}