{"componentChunkName":"component---src-templates-blog-post-js","path":"/higher-functions/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"d8aaf3f4-1904-5fb5-a34e-1dc16eab1051","html":"<ul>\n<li>functions are first class objects</li>\n<li>meaning of first class objects , the following can be done</li>\n<li>assign to variables</li>\n<li>stored in datastructures</li>\n<li>passed as arguments to other functions</li>\n<li>can be declared inside other functions</li>\n<li>returned from other functions</li>\n<li>lambdas are single line functions with just the return statement</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span>\n\n<span class=\"token comment\"># what the above statement does is essentially create a function name yell and then assign it to a variable named yell.</span>\nyell<span class=\"token punctuation\">.</span>__name__ <span class=\"token comment\"># this will return yell which is the name of the function</span>\n\nbark <span class=\"token operator\">=</span> yell\nbark<span class=\"token punctuation\">.</span>__name__ <span class=\"token comment\"># this will return yell which is the name of the function the variable points to</span>\n\n<span class=\"token keyword\">del</span> yell \n\nbark<span class=\"token punctuation\">(</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># both bark and yell store references to the function and thus even if yell is deleted , bark works</span>\n\nfunction_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>bark<span class=\"token punctuation\">,</span> yell<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> func <span class=\"token keyword\">in</span> function_dict<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span><span class=\"token string\">\"woof\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    greeting <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am a Python program'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># functions that can accept functions as arguments are called higher order functions</span>\n<span class=\"token comment\"># this ability helps us abstract behaviour into objects and pass them around</span>\n<span class=\"token comment\"># the inbuilt map function is a classic higher order function</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'...'</span>\n    <span class=\"token keyword\">return</span> whisper<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># inner or nested functions give the ability to scope functions within another function</span>\n<span class=\"token comment\"># here whisper does not exist outside the speak function</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_speak_func</span><span class=\"token punctuation\">(</span>volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'...'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span>\n\n    <span class=\"token keyword\">if</span> volume <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> yell\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> whisper\n\nspeak_func <span class=\"token operator\">=</span> get_speak_func<span class=\"token punctuation\">(</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\nspeak_func<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># functions can not only accept behaviours but they can also return behaviours based upon conditions</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_adder</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> n\n    <span class=\"token keyword\">return</span> add\n\n<span class=\"token comment\"># when a variable of the outer function defines the functionality in the inner function</span>\n<span class=\"token comment\"># it is said to enclose lexical scope and is this called a lexical closure or closure</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Adder</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">+</span> x\n\nadd_1 <span class=\"token operator\">=</span> Adder<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nadd_1<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => this will trigger the call method and return 7</span>\n\n<span class=\"token comment\"># the same functionality expressed as a class</span>\n<span class=\"token comment\"># the class needs to implement a __call__ method for it to be a callable</span>\n<span class=\"token comment\"># the call function is called when the class instance is called</span>\n\nadd <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y\n\n<span class=\"token comment\"># lambda functions are anonymous and thus can be used without binding to a variable</span>\n<span class=\"token comment\"># thus it can be constructed and called in the same line</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => this will give 8</span></code></pre></div>","timeToRead":2,"frontmatter":{"title":"Higher Functions in Python","date":"November 25, 2020","spoiler":"Bow to the higher order.","cta":null},"fields":{"slug":"/higher-functions/","langKey":"en"}}},"pageContext":{"slug":"/higher-functions/","previous":{"fields":{"slug":"/dunder-underscores/","langKey":"en","directoryName":"dunder-underscores","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Dunder/Underscore Methods in Python"}},"next":{"fields":{"slug":"/list-slicing/","langKey":"en","directoryName":"list-slicing","maybeAbsoluteLinks":[]},"frontmatter":{"title":"List Slicing in Python"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}