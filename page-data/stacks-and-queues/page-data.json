{"componentChunkName":"component---src-templates-blog-post-js","path":"/stacks-and-queues/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"c4e42b5b-6f1c-5ec2-9368-6b0aefa5a59f","html":"<ul>\n<li>supports fast LIFO semantics for inserts and deletes</li>\n<li>doesnt allow for random access to the objects</li>\n<li>takes O(1) time for insertion and deletion</li>\n<li>are used for depth first search on a tree or graph data structure</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># lists can be a decent stack structure if used only for insertion and deletion</span>\n<span class=\"token comment\"># from one end</span>\n<span class=\"token comment\"># python lists are implemented as dynamic arrays internally and thus might be</span>\n<span class=\"token comment\"># required to resize its storage space when elements are added or deleted</span>\n<span class=\"token comment\"># the list overallocated so that not every push or pop needs resizing giving an amortized O(1) performance</span>\n<span class=\"token comment\"># on the otherside because of this it gives an O(1) complexity random access</span>\n<span class=\"token comment\"># to get the O(1) performance elements have to be deleted and added to the end of a list</span>\n<span class=\"token comment\"># using append and pop.If we delete from the start or middle then elements will be shifted</span>\n<span class=\"token comment\"># leading to O(n) complexity</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'eat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat'}</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat','sleep'}</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat','sleep','code'}</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => code</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => sleep</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => eat</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># error</span>\n\n<span class=\"token comment\"># collections.deque is another implementation in python which can be used as stacks</span>\n<span class=\"token comment\"># it is a double-ended queue which supports adding and removing elements from both</span>\n<span class=\"token comment\"># ends in O(1) complexity</span>\n<span class=\"token comment\"># they can serve as both stacks and queues</span>\n<span class=\"token comment\"># is implemented as a doubly linked list and thus gives O(1) complexity for adding and</span>\n<span class=\"token comment\"># removing objects but gives O(n) complexity for accessing random elements in the middle</span>\n\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\ns <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'eat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat'}</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat','sleep'}</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat','sleep','code'}</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => code</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => sleep</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => eat</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># error</span>\n\n<span class=\"token comment\"># queue.LifoQueue provides a stack structure which can be used for parallel computing</span>\n<span class=\"token comment\"># provides locking semantics which supports multiple producers and consumers</span>\n<span class=\"token comment\"># should be used in case of parallel computing as normal use may give unneeded overhead</span>\n\n<span class=\"token keyword\">from</span> queue <span class=\"token keyword\">import</span> LifoQueue\n\ns <span class=\"token operator\">=</span> LifoQueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'eat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat'}</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat','sleep'}</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => {'eat','sleep','code'}</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => code</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => sleep</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => eat</span>\ns<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># error</span></code></pre></div>","timeToRead":1,"frontmatter":{"title":"Stacks and Queues in Python","date":"November 30, 2020","spoiler":"Some archaic datastructures in python.","cta":null},"fields":{"slug":"/stacks-and-queues/","langKey":"en"}}},"pageContext":{"slug":"/stacks-and-queues/","previous":{"fields":{"slug":"/record-structs-and-data-transfer-objects/","langKey":"en","directoryName":"record-structs-and-data-transfer-objects","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Record Structs and Data transfer objects in Python"}},"next":{"fields":{"slug":"/string-formatting-in-python/","langKey":"en","directoryName":"string-formatting-in-python","maybeAbsoluteLinks":[]},"frontmatter":{"title":"String Formatting in Python"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}