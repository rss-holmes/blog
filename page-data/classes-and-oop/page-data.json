{"componentChunkName":"component---src-templates-blog-post-js","path":"/classes-and-oop/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"3ac53332-6b9b-562c-a879-2cf82929427f","html":"<h2 id=\"dunder-methods\"><a href=\"#dunder-methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dunder Methods</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">my_class</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">pass</span>\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># this returns a string which can be used for showing the string representation</span>\n\t\t<span class=\"token comment\"># of the class in debuggers or system outputs.</span>\n\t\t<span class=\"token comment\"># the repr function is also used as a fallback for when the str function is not</span>\n\t\t<span class=\"token comment\"># present</span>\n\t\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># this returns a string which can be used for showing the class when in is printed*</span>\n\t\t<span class=\"token comment\"># anywhere using print statement*</span>\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__unicode__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># used in python 2.7 instead of the str class to return a unicode string representation*</span>\n\t\t<span class=\"token comment\"># should be implemented instead of str in python2.x as the str method returns bytes*</span>\n\t</code></pre></div>\n<h2 id=\"custom-exception-methods-\"><a href=\"#custom-exception-methods-\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Exception Methods ****</h2>\n<ul>\n<li>should be done to make the error handling more readable</li>\n<li>all errors(existing and custom defined) inherit from the Exception class</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>custom_msg <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__str_</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Calling custom error\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message sent by user :\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>custom_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfileDoesNotExist</span><span class=\"token punctuation\">(</span>APIException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n\t<span class=\"token comment\"># here APIException ships with drf and is the base rest exception</span>\n\tstatus_code <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n\tdefault_detail <span class=\"token operator\">=</span> <span class=\"token string\">'The requested profile does not exist.'</span>\n\n\t<span class=\"token comment\"># to raise an exception</span>\n\t<span class=\"token keyword\">raise</span> CustomError</code></pre></div>\n<h2 id=\"cloning-objects\"><a href=\"#cloning-objects\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Cloning objects</strong></h2>\n<ul>\n<li>pythons built in collections can be copied by using the respective factory functions in python</li>\n<li>however this created shallow copies , meaning that the copies are only one level deep</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">#(this will make a copy of a and point b to it)</span>\nc <span class=\"token operator\">=</span> a <span class=\"token comment\">#(this will point c to a)</span>\na<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#(this doesnt change b but changes c)</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></code></pre></div>\n<h2 id=\"all-about-classes\"><a href=\"#all-about-classes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>All about Classes</strong></h2>\n<ul>\n<li>when a class variable on an instance is overriden, it creates an instance variable with the same name as the class variable which shadows the instance variable</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## ======================================================================================================== ##</span>\n\n<span class=\"token comment\"># Class variables vs Instance variables</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CountedObject</span><span class=\"token punctuation\">:</span>\n\n\tnum_instances <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>num_instances\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t\t<span class=\"token comment\"># this is a wrong implementation as it would make and update a</span>\n\t\t<span class=\"token comment\"># shadow variable num_instances which will ge linked to the instance</span>\n\t\tself<span class=\"token punctuation\">.</span>num_instances <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\nCountedObject<span class=\"token punctuation\">.</span>num_instances <span class=\"token comment\"># => 0 this will access the class variable</span>\nCountedObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>num_instances <span class=\"token comment\"># => 1 this will access the instance variable</span>\nCountedObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>num_instances <span class=\"token comment\"># => 2</span>\nCountedObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>num_instances <span class=\"token comment\"># => 3</span>\nCountedObject<span class=\"token punctuation\">.</span>num_instances <span class=\"token comment\"># => 3</span>\n\n<span class=\"token comment\">## ======================================================================================================== ##</span>\n\n<span class=\"token comment\"># Class method vs Static method vs normal methods</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">:</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t\t<span class=\"token comment\"># can access and change the instance state</span>\n\t\t<span class=\"token comment\"># can also access and change the class state</span>\n\t\t<span class=\"token comment\"># through self.__class__</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'instance method called'</span><span class=\"token punctuation\">,</span> self\n\t\n\t<span class=\"token decorator annotation punctuation\">@classmethod</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">classmethod</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t\t<span class=\"token comment\"># since this method only has access to the cls parameter, it can only</span>\n\t\t<span class=\"token comment\"># access and change the class state and not the instance state</span>\n\t\t<span class=\"token comment\"># class methods are often used as factory methods to create different</span>\n\t\t<span class=\"token comment\"># types of instances of the same class.It is also used for defining</span>\n\t\t<span class=\"token comment\"># alternate constructors.</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'class method called'</span><span class=\"token punctuation\">,</span> cls\n\t\n\t<span class=\"token decorator annotation punctuation\">@staticmethod</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t\t<span class=\"token comment\"># since this method doesnt have access to either the cls or the self</span>\n\t\t<span class=\"token comment\"># parameters , it can access neither the class or the instance state</span>\n\t\t<span class=\"token comment\"># these methods are mainly used to namespace the method or provide</span>\n\t\t<span class=\"token comment\"># functionality which will be universal across classes or instances</span>\n\t\t<span class=\"token comment\"># these methods are generally used as a helper method inside another</span>\n\t\t<span class=\"token comment\"># instance or class method</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'static method called'</span>\n\nMyClass<span class=\"token punctuation\">.</span><span class=\"token builtin\">classmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => gives the output of the classmethod</span>\nMyClass<span class=\"token punctuation\">.</span><span class=\"token builtin\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => gives the output of the staticmethod</span>\nMyClass<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => throws an error as the instance hasnt been created</span>\n\nobj <span class=\"token operator\">=</span> MyClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nobj<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => gives the output of the method</span>\nMyClass<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\"># => gives the output of the method</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token builtin\">classmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => gives the output of the classmethod</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token builtin\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => gives the output of the staticmethod</span>\n\n<span class=\"token comment\">## ======================================================================================================== ##</span>\n\n<span class=\"token comment\"># Class Getters and Setters</span>\n<span class=\"token comment\"># all properties and functions of a class can be found in the __dict__ dictionary of the class</span>\n<span class=\"token comment\"># man.temperature becomes man.__dict__['temperature']</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Celsius</span><span class=\"token punctuation\">:</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> initTemp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>_temperature <span class=\"token operator\">=</span> initTemp\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">to_fahrenheit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>temperature <span class=\"token operator\">*</span> <span class=\"token number\">1.8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span>\n\t\n\t<span class=\"token decorator annotation punctuation\">@property</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">temperature</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>self<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Getting value\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_temperature\n\t\n\t<span class=\"token decorator annotation punctuation\">@temperature<span class=\"token punctuation\">.</span>setter</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">temperature</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>self<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>value<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">273</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Temperature below -273 is not possible\"</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Setting value\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>_temperature <span class=\"token operator\">=</span> value\n\n<span class=\"token comment\"># Method 2</span>\n\n<span class=\"token comment\"># temperature = property()</span>\n<span class=\"token comment\"># temperature = temperature.getter(get_temperature)</span>\n<span class=\"token comment\"># temperature = temperature.setter(set_temperature)</span>\n\n<span class=\"token comment\"># Method 3</span>\n\n<span class=\"token comment\"># temperature = property(get_temperature,set_temperature)</span>\n\n<span class=\"token comment\"># The attribute temperature is a property object which</span>\n<span class=\"token comment\"># provides interface to the private variable _temperature</span>\n<span class=\"token comment\"># The getter setter replaces the lookup into the __dict__ dictionary for the specific properties</span>\n<span class=\"token comment\"># Even after this the _temperature variable is still accessible from the class instance</span>\n<span class=\"token comment\"># Thus if anyone directly changes it then the data will be mutated directly ie not through</span>\n<span class=\"token comment\"># the getters and setters.</span>\n<span class=\"token comment\"># The private variable needs to be different from the property object name otherwise the</span>\n<span class=\"token comment\"># instantiation goes into a recursive loop</span></code></pre></div>","timeToRead":3,"frontmatter":{"title":"Classes and OOPS in python","date":"November 13, 2020","spoiler":"How to go object oriented in python.","cta":null},"fields":{"slug":"/classes-and-oop/","langKey":"en"}}},"pageContext":{"slug":"/classes-and-oop/","previous":{"fields":{"slug":"/nested-inner-functions/","langKey":"en","directoryName":"nested-inner-functions","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Nested/Inner functions in python"}},"next":{"fields":{"slug":"/first-class-objects/","langKey":"en","directoryName":"first-class-objects","maybeAbsoluteLinks":[]},"frontmatter":{"title":"First Class in python"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}