{"componentChunkName":"component---src-templates-blog-post-js","path":"/drf-jwt/","result":{"data":{"site":{"siteMetadata":{"title":"Gods of Code","author":"Rohan Sen Sharma"}},"markdownRemark":{"id":"bc47ae28-cc38-5dd5-9d14-9861c496cc32","html":"<h1 id=\"drf-jwt-authentication\"><a href=\"#drf-jwt-authentication\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DRF JWT Authentication</h1>\n<ul>\n<li>All the functions in a drf pipe generally need to keep request and response objects which are part of the rest_framework</li>\n<li>All the functionality starts from the authentication class which can be overridden. The default authentication classes list mentioned in the settings file contains a list of classed each implementing an authenticate method and inheriting the <code class=\"language-text\">authentication.BaseAuthentication</code> from the rest_framework file.</li>\n<li>The authenticate function returns 2 objects , the first is the user object and the second the context object which can contain any context variables which need to be passed on to the next function in the pipe. The user is set into the <code class=\"language-text\">request.user</code> and the context object is set into the <code class=\"language-text\">request.auth</code></li>\n<li>All the authentication functions included in the authentication classes list will be called one by one ideally. If any of the functions returns None then the next function in the list is automatically called. However if any function returns a non Null object then it breaks the chain and calls the next method in the chain</li>\n<li>In case any error is raised in this whole process , it is sent to the default error handler mentioned in the settings file</li>\n<li>In the next step the wsgi handler decides where to route the request. to do this the wsgi thread looks at the root url conf and then redirects it to the necessary view.</li>\n<li>Once inside the view we can implement all the business logic .Generally the view contains a mechanism to handle GET or POST data and then extract the key arguments and then pass the data through a serializerâ€™s validate method to ensure that the data conforms to a pre defined standard. Once the data is validated, other operations can be run on the data and then once the processing is complete the new data can be sent forward to the next step.</li>\n<li>In case any error occurs in this step the error is handled by the exception handler</li>\n<li>In case any exception is raised in the process enumerated till now , immediately the pipe breaks and the custom exception handler is called with an exception object. In case the exception is a subclass of <code class=\"language-text\">APIException</code>, it can be passed to the default exception<em>handler provided by the rest</em>framework to extract a meaningful response which if required can be sent directly to the api consumer. However in case the exception is not known to the rest framework meaning is not sub classing APIException then if we pass it to the default exception handler provided by the rest framework , it will return None as it wont be able to recognise it. In this case if not handled a 500 internal server error will be raised by wsgi. Therefore it is better we handle this scenario in a different function. Also any behaviour handled by these 2 functions can be overridden in small function blocks here only by maintaining an error class to handler class mapping and then calling the respective handler class depending on the error class.</li>\n<li>In the next step the data is sent to the default renderer .this class is responsible for reorganising all the data accumulated till now to make a meaningful response for the api consumer.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> djangorestframework-jwt</code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># the declaration of the drf settings in the settings file</span>\n<span class=\"token comment\"># settings.py</span>\n\n<span class=\"gatsby-highlight-code-line\">REST_FRAMEWORK <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\t<span class=\"token string\">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">'tranzact.rest_framework_customization.authentication.JWTAuthMiddlewareHTTP'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'rest_framework.authentication.SessionAuthentication'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'rest_framework.authentication.BasicAuthentication'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token string\">'DEFAULT_PERMISSION_CLASSES'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token string\">'DEFAULT_RENDERER_CLASSES'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">'tranzact.rest_framework_customization.renderer.CustomJSONRenderer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\"></span><span class=\"token string\">'EXCEPTION_HANDLER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'tranzact.rest_framework_customization.exception_handler.core_exception_handler'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># the custom authentication class</span>\n<span class=\"token comment\"># authentication.py</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JWTAuthMiddlewareHTTP</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">.</span>BaseAuthentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n    authentication_header_prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"Bearer\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        request<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># `auth_header` should be an array with two elements: 1) the name of</span>\n        <span class=\"token comment\"># the authentication header (in this case, \"Token\") and 2) the JWT</span>\n        <span class=\"token comment\"># that we should authenticate against.</span>\n        auth_header <span class=\"token operator\">=</span> authentication<span class=\"token punctuation\">.</span>get_authorization_header<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        auth_header_prefix <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>authentication_header_prefix<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> auth_header<span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token comment\"># No authentication header was provided so bypass the authentication mechanism</span></span>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>auth_header<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Authentication header wasnt supplied in the correct format</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Authentication header not provided in the correct format.\"</span>\n            <span class=\"token keyword\">raise</span> exceptions<span class=\"token punctuation\">.</span>AuthenticationFailed<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># The JWT library we're using can't handle the `byte` type, which is</span>\n        <span class=\"token comment\"># commonly used by standard libraries in Python 3. To get around this,</span>\n        <span class=\"token comment\"># we simply have to decode `prefix` and `token`.</span>\n        prefix <span class=\"token operator\">=</span> auth_header<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n        token <span class=\"token operator\">=</span> auth_header<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> prefix<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> auth_header_prefix<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Authentication header prefix was not as specified</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Incorrect authentication header prefix supplied\"</span>\n            <span class=\"token keyword\">raise</span> exceptions<span class=\"token punctuation\">.</span>AuthenticationFailed<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_authenticate_credentials<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_authenticate_credentials</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"</span>\n<span class=\"token triple-quoted-string string\">        Try to authenticate the given credentials. If authentication is</span>\n<span class=\"token triple-quoted-string string\">        successful, return the user and token. If not, throw an error.</span>\n<span class=\"token triple-quoted-string string\">        \"\"\"</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            user_decoded_jwt_data <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>\n                token<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>SECRET_KEY<span class=\"token punctuation\">,</span> algorithms<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"The authentication token could not be decoded.\"</span>\n            <span class=\"token keyword\">raise</span> exceptions<span class=\"token punctuation\">.</span>AuthenticationFailed<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            user <span class=\"token operator\">=</span> get_user_model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">\"userprofile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span>user_decoded_jwt_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> get_user_model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"No user matching this token was found.\"</span>\n            <span class=\"token keyword\">raise</span> exceptions<span class=\"token punctuation\">.</span>AuthenticationFailed<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> user<span class=\"token punctuation\">.</span>is_active<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"The user matching this token has been deactivated.\"</span>\n            <span class=\"token keyword\">raise</span> exceptions<span class=\"token punctuation\">.</span>AuthenticationFailed<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># can return 2 objects, first will be set to request.user and 2nd to request.auth</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># the view function which contains the business logic</span>\n<span class=\"token comment\"># views.py</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginAPIView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\tpermission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>AllowAny<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">#renderer_classes = (UserJSONRenderer,)</span>\n\tserializer_class <span class=\"token operator\">=</span> LoginSerializer\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t\tuser <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\tserializer <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>serializer_class<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>user<span class=\"token punctuation\">)</span>\n\t\tserializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span>raise_exception<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_200_OK<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># the custom error handler function</span>\n<span class=\"token comment\"># exception_handler.py</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> exception_handler<span class=\"token punctuation\">,</span> Response</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">core_exception_handler</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    response <span class=\"token operator\">=</span> exception_handler<span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span>\n    request <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">]</span>\n    exception_class <span class=\"token operator\">=</span> exc<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__\n\n    <span class=\"token keyword\">if</span> response <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># if the response is None it means that drf could not recognize the type of error.</span>\n        <span class=\"token comment\"># This means the error is not a subclass of APIException but a subclass of Exception</span>\n        <span class=\"token comment\"># and thus needs to be handled separately</span>\n        <span class=\"token keyword\">return</span> _core_higher_order_exception_handler<span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">    custom_lower_order_exception_handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>        <span class=\"token string\">\"ValidationError\"</span><span class=\"token punctuation\">:</span> _handle_validation_error<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"PermissionDenied\"</span><span class=\"token punctuation\">:</span> _handle_permission_denied_error<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> exception_class <span class=\"token keyword\">in</span> custom_lower_order_exception_handlers<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> custom_lower_order_exception_handlers<span class=\"token punctuation\">[</span>exception_class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n            exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> response\n        <span class=\"token punctuation\">)</span>\n\n    send_error_email_manually<span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> _handle_default_error<span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_core_higher_order_exception_handler</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    request <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">]</span>\n    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">\"errors\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"exception\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> content_type<span class=\"token operator\">=</span><span class=\"token string\">\"application/json\"</span>\n    <span class=\"token punctuation\">)</span>\n    exception_class <span class=\"token operator\">=</span> exc<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__\n\n    custom_higher_order_exception_handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ValueError\"</span><span class=\"token punctuation\">:</span> _handle_value_error<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> exception_class <span class=\"token keyword\">in</span> custom_higher_order_exception_handlers<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> custom_higher_order_exception_handlers<span class=\"token punctuation\">[</span>exception_class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n            exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> response\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_value_error</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_validation_error</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"errors\"</span><span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_permission_denied_error</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"errors\"</span><span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_default_error</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"errors\"</span><span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> response</code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># the view function which contains the rendering logic</span>\n<span class=\"token comment\"># renderer.py</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>renderers <span class=\"token keyword\">import</span> JSONRenderer</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomJSONRenderer</span><span class=\"token punctuation\">(</span>JSONRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    charset <span class=\"token operator\">=</span> <span class=\"token string\">\"utf-8\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> accepted_media_type<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> renderer_context<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># here data is whatever comes under the response.data section</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        \n            errors <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n            request <span class=\"token operator\">=</span> renderer_context<span class=\"token punctuation\">[</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> <span class=\"token boolean\">None</span>\n            anonymous <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>is_anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token keyword\">except</span> AttributeError<span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">            errors <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></span>            request <span class=\"token operator\">=</span> renderer_context<span class=\"token punctuation\">[</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> <span class=\"token boolean\">None</span>\n            anonymous <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>is_anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span> \n            errors <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            anonymous <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> errors <span class=\"token keyword\">else</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> errors<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"anonymous\"</span><span class=\"token punctuation\">:</span> anonymous<span class=\"token punctuation\">,</span> \n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CustomJSONRenderer<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span>\n            data<span class=\"token punctuation\">,</span> accepted_media_type<span class=\"token punctuation\">,</span> renderer_context\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># In urls.py</span>\n<span class=\"token keyword\">from</span> rest_framework_jwt<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> obtain_jwt_token<span class=\"token punctuation\">,</span> refresh_jwt_token\n\n<span class=\"gatsby-highlight-code-line\">urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^api-token-auth/'</span><span class=\"token punctuation\">,</span> obtain_jwt_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nurl<span class=\"token punctuation\">(</span><span class=\"token string\">r'^api-token-refresh/'</span><span class=\"token punctuation\">,</span> refresh_jwt_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>","timeToRead":6,"frontmatter":{"title":"DRF and JWT","date":"October 15, 2020","spoiler":"The other kind of technical debt.","cta":null},"fields":{"slug":"/drf-jwt/","langKey":"en"}}},"pageContext":{"slug":"/drf-jwt/","previous":{"fields":{"slug":"/the-wet-codebase/","langKey":"en","directoryName":"the-wet-codebase","maybeAbsoluteLinks":[]},"frontmatter":{"title":"The WET Codebase"}},"next":null,"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}